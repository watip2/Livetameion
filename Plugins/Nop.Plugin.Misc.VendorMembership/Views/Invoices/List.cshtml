@using Nop.Core.Domain.Catalog
@using Nop.Core.Infrastructure;
@using System;
@using Nop.Web.Framework;
@using Nop.Web.Framework.UI;
@using Nop.Web.Framework.Events;
@using Nop.Core.Infrastructure;
@using Nop.Services.Events;
@using Nop.Admin.Models.Catalog;
@using Nop.Plugin.Misc.VendorMembership.ViewModels;
@model InvoiceListModel

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    //page title
    ViewBag.Title = "Invoices";
    Layout = "~/Plugins/Misc.VendorMembership/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-sales.png")" alt="" />
            Invoices
        </div>
        <div class="options">
            @if (!Model.IsLoggedInAsVendor)
            {
                //a vendor cannot export/import orders
                <input type="submit" name="exportxml-all" class="k-button" value="@T("Admin.Common.ExportToXml.All")" />
                <input type="button" id="exportxml-selected" class="k-button" value="@T("Admin.Common.ExportToXml.Selected")" />
                <input type="submit" name="exportexcel-all" class="k-button" value="@T("Admin.Common.ExportToExcel.All")" />
                <input type="button" id="exportexcel-selected" class="k-button" value="@T("Admin.Common.ExportToExcel.Selected")" />
            }
            <input type="submit" name="pdf-invoice-all" class="k-button" value="@T("Admin.Orders.PdfInvoice.All")" />
            <input type="button" id="pdf-invoice-selected" class="k-button" value="@T("Admin.Orders.PdfInvoice.Selected")" />
        </div>
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StartDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StartDate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.EndDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.EndDate)
            </td>
        </tr>
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CustomerEmail):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CustomerEmail)
            </td>
        </tr>*@
        @*<tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.OrderStatusId):
            </td>
            <td class="adminData">
                @Html.DropDownList("OrderStatusId", Model.AvailableOrderStatuses)
            </td>
        </tr>*@
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PaymentStatusId):
            </td>
            <td class="adminData">
                @Html.DropDownList("PaymentStatusId", Model.AvailablePaymentStatuses)
            </td>
        </tr>
        @*<tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ShippingStatusId):
            </td>
            <td class="adminData">
                @Html.DropDownList("ShippingStatusId", Model.AvailableShippingStatuses)
            </td>
        </tr>*@
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StoreId):
            </td>
            <td class="adminData">
                @Html.DropDownList("StoreId", Model.AvailableStores)
            </td>
        </tr>*@
        @*<tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.VendorId):
            </td>
            <td class="adminData">
                @Html.DropDownList("VendorId", Model.AvailableVendors)
            </td>
        </tr>*@
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.WarehouseId):
            </td>
            <td class="adminData">
                @Html.DropDownList("WarehouseId", Model.AvailableWarehouses)
            </td>
        </tr>*@
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.BillingCountryId):
            </td>
            <td class="adminData">
                @Html.DropDownList("BillingCountryId", Model.AvailableCountries)
            </td>
        </tr>*@
        @*<tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PaymentMethodSystemName):
            </td>
            <td class="adminData">
                @Html.DropDownList("PaymentMethodSystemName", Model.AvailablePaymentMethods)
            </td>
        </tr>*@
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ProductId):
            </td>
            <td class="adminData">
                <input type="text" id="search-product-name" autocomplete="off" />
                <span id="search-product-friendly-name"></span>
                <input type="button" id="search-product-clear" class="k-button" style="display:none;" value="@T("Admin.Common.Clear")" />
                

                @Html.TextBoxFor(model => model.ProductId, new { autocomplete = "off", style = "display:none;" })
                <script type="text/javascript">
                    $(document).ready(function() {
                        $('#search-product-name').autocomplete({
                            delay: 500,
                            minLength: 3,
                            source: '@(Url.Action("ProductSearchAutoComplete"))',
                            select: function(event, ui) {
                                $('#@Html.FieldIdFor(model => model.ProductId)').val(ui.item.productid);
                                $('#search-product-friendly-name').text(ui.item.label);

                                $('#search-product-clear').show();
                                return false;
                            }
                        });

                        //remove button
                        $('#search-product-clear').click(function () {
                            $('#@Html.FieldIdFor(model => model.ProductId)').val('0');
                            $('#search-product-friendly-name').text('');
                            $('#search-product-clear').hide();
                            return false;
                        });
                    });
                </script>
            </td>
        </tr>*@
        @*<tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.OrderNotes):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OrderNotes)
            </td>
        </tr>
       <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.OrderGuid):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OrderGuid)
            </td>
        </tr>*@
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GoDirectlyToNumber):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.GoDirectlyToNumber)
                <input type="submit" name="go-to-order-by-number" class="k-button" value="@T("Admin.Common.Go")" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="search-orders" class="k-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <table class="adminContent">
        <tr>
            <td>
                <div id="orders-grid"></div>

                <script>
                    $(document).ready(function() {
                        $("#orders-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("InvoiceList", "Invoices", new { area = "Vendor" }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: additionalData
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                requestEnd: function (e) {
                                    if (e.type == "read") {
                                        var response = e.response;
                                        if (response) {
                                            //store extra data
                                            reportAggregates = e.response["ExtraData"];
                                        }
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            dataBound: onDataBound,
                            columns: [
                                {
                                    field: "Id",
                                    headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                                    width: 50
                                },
                                {
                                    field: "Id",
                                    title: "Invoice ID",
                                    width: 50
                                },
                                @if (!Model.IsLoggedInAsVendor)
                                {
                                    //a vendor does not have access to this functionality
                                    <text>{
                                    field: "OrderStatus",
                                    title: "@T("Admin.Orders.Fields.OrderStatus")",
                                    width: 200
                                },</text>
                                }
                                {
                                    field: "PaymentStatus",
                                    title: "@T("Admin.Orders.Fields.PaymentStatus")",
                                    width: 200
                                },
                                @if (!Model.IsLoggedInAsVendor)
                                {
                                    //a vendor does not have access to this functionality
                                    <text>{
                                    field: "ShippingStatus",
                                    title: "@T("Admin.Orders.Fields.ShippingStatus")",
                                    width: 200
                                },</text>
                                }
                                @*{
                                    field: "CustomerEmail",
                                    title: "@T("Admin.Orders.Fields.Customer")",
                                    width: 300,
                                    template: '#=CustomerFullName# (#=CustomerEmail#)'
                                }, {
                                    field: "StoreName",
                                    title: "@T("Admin.Orders.Fields.Store")",
                                    width: 200
                                },*@ {
                                    field: "Items",
                                    title: "OrderTotal",
                                    width: 200
                                }, {
                                    field: "Commission",
                                    title: "Commission",
                                    width: 200
                                }, {
                                    field: "CreatedOn",
                                    title: "@T("Admin.Orders.Fields.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                },
                                @if (!Model.IsLoggedInAsVendor)
                                {
                                    //a vendor does not have access to this functionality
                                    <text>{
                                    field: "OrderTotal",
                                    title: "@T("Admin.Orders.Fields.OrderTotal")",
                                    width: 200,
                                    footerTemplate: '<div><strong>@T("Admin.Orders.Report.Summary"):</strong></div>' +
                                                         '<div>@T("Admin.Orders.Report.Profit"): <span id=\"aggregator-profit-block\"></span></div>' +
                                                         '<div>@T("Admin.Orders.Report.Shipping"): <span id=\"aggregator-shipping-block\"></span></div>' +
                                                         '<div>@T("Admin.Orders.Report.Tax"): <span id=\"aggregator-tax-block\"></span></div>' +
                                                         '<div>@T("Admin.Orders.Report.Total"): <span id=\"aggregator-total-block\"></span></div>'
                                },</text>
                                }
                                {
                                    field: "Id",
                                    title: "Pay Invoice",
                                    width: 100,
                                    template: '<a href="Pay/#=Id#" onclick="return false;">Pay</a>'
                                }
                            ]
                        } );
                    });
                </script>

                <script type="text/javascript">

                    var selectedIds = [];
                    var reportAggregates = "";

                    $(document).ready(function () {

                        //search button
                        $('#search-orders').click(function () {
                            //search
                            var grid = $('#orders-grid').data('kendoGrid');
                            grid.dataSource.page(1); //new search. Set page size to 1
                            //grid.dataSource.read(); we already loaded the grid above using "page" function
                            //clear selected checkboxes
                            $('.checkboxGroups').attr('checked', false).change();
                            selectedIds = [];
                            return false;
                        });

                        $("#@Html.FieldIdFor(model => model.CustomerEmail)").keydown(function (event) {
                            if (event.keyCode == 13) {
                                $("#search-orders").click();
                                return false;
                            }
                        });

                        $("#@Html.FieldIdFor(model => model.OrderNotes)").keydown(function (event) {
                            if (event.keyCode == 13) {
                                $("#search-orders").click();
                                return false;
                            }
                        });
                        
                        $('#mastercheckbox').click(function () {
                            $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                        });

                        //wire up checkboxes.
                        $('#orders-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                            var $check = $(this);
                            if ($check.is(":checked") == true) {
                                var checked = jQuery.inArray($check.val(), selectedIds);
                                if (checked == -1) {
                                    //add id to selectedIds.
                                    selectedIds.push($check.val());
                                }
                            }
                            else {
                                var checked = jQuery.inArray($check.val(), selectedIds);
                                if (checked > -1) {
                                    //remove id from selectedIds.
                                    selectedIds = $.grep(selectedIds, function (item, index) {
                                        return item != $check.val();
                                    });
                                }
                            }
                            updateMasterCheckbox();
                        });
                    });

                    function additionalData() {
                        var data = {
                            StartDate: $('#@Html.FieldIdFor(model => model.StartDate)').val(),
                            EndDate: $('#@Html.FieldIdFor(model => model.EndDate)').val(),
                            CustomerEmail: $('#@Html.FieldIdFor(model => model.CustomerEmail)').val(),
                            OrderStatusId: $('#@Html.FieldIdFor(model => model.OrderStatusId)').val(),
                            PaymentStatusId: $('#@Html.FieldIdFor(model => model.PaymentStatusId)').val(),
                            ShippingStatusId: $('#@Html.FieldIdFor(model => model.ShippingStatusId)').val(),
                            StoreId: $('#@Html.FieldIdFor(model => model.StoreId)').val(),
                            VendorId: $('#@Html.FieldIdFor(model => model.VendorId)').val(),
                            WarehouseId: $('#@Html.FieldIdFor(model => model.WarehouseId)').val(),
                            BillingCountryId: $('#@Html.FieldIdFor(model => model.BillingCountryId)').val(),
                            PaymentMethodSystemName: $('#@Html.FieldIdFor(model => model.PaymentMethodSystemName)').val(),
                            ProductId: $('#@Html.FieldIdFor(model => model.ProductId)').val(),
                            OrderNotes: $('#@Html.FieldIdFor(model => model.OrderNotes)').val(),
                            OrderGuid: $('#@Html.FieldIdFor(model => model.OrderGuid)').val()
                        };
                        addAntiForgeryToken(data);
                        return data;
                    }

                    function onDataBound(e) {

                        $('#orders-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                            var currentId = $(this).val();
                            var checked = jQuery.inArray(currentId, selectedIds);
                            //set checked based on if current checkbox's value is in selectedIds.
                            $(this).attr('checked', checked > -1);
                        });

                        updateMasterCheckbox();

                        //update order totals summary
                        if (reportAggregates != "") {
                            for (var key in reportAggregates) {
                                $('#aggregator-profit-block').text(reportAggregates['aggregatorprofit']);
                                $('#aggregator-shipping-block').text(reportAggregates['aggregatorshipping']);
                                $('#aggregator-tax-block').text(reportAggregates['aggregatortax']);
                                $('#aggregator-total-block').text(reportAggregates['aggregatortotal']);
                            }
                        }
                    }
                    
                    function updateMasterCheckbox() {
                        var numChkBoxes = $('#orders-grid input[type=checkbox][id!=mastercheckbox]').length;
                        var numChkBoxesChecked = $('#orders-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                        $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                    }
                </script>
            </td>
        </tr>
    </table>
}


@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportXmlSelected", "Order", FormMethod.Post, new { id = "export-xml-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            return false;
        });
    });

</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportExcelSelected", "Order", FormMethod.Post, new { id = "export-excel-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            return false;
        });
    });

</script>

@*Print packaging slips selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("PdfInvoiceSelected", "Order", FormMethod.Post, new { id = "pdf-invoice-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

    $(document).ready(function () {
        $('#pdf-invoice-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#pdf-invoice-selected-form #selectedIds').val(ids);
            $('#pdf-invoice-selected-form').submit();
            return false;
        });
    });

</script>

<script src="http://kendo.cdn.telerik.com/2015.3.1111/js/kendo.all.min.js"></script>
<div id="example">
        <div id="window">
            <div class="armchair"><img src="../content/web/window/armchair-402.png" alt="Artek Alvar Aalto - Armchair 402" /> Artek Alvar Aalto - Armchair 402</div>
            <p>Alvar Aalto is one of the greatest names in modern architecture and design. Glassblowers at the iittala factory still meticulously handcraft the legendary vases that are variations on one theme, fluid organic shapes that let the end user decide the use. Interpretations of the shape in new colors and materials add to the growing Alvar Aalto Collection that remains true to his original design.</p>

            <p>Born Hugo Alvar Henrik Aalto (February 3, 1898 - May 11, 1976) in Kuortane, Finland, was noted for his humanistic approach to modernism. He studied architecture at the Helsinki University of Technology from 1916 to 1921. In 1924 he married architect Aino Marsio.</p>

            <p>Alvar Aalto was one of the first and most influential architects of the Scandinavian modern movement, and a member of the Congres Internationaux d'Architecture Moderne. Major architectural works include the Finlandia Hall in Helsinki, Finland, and the campus of Helsinki University of Technology.</p>

            <p>Source: <a href="http://www.aalto.com/about-alvar-aalto.html" title="About Alvar Aalto">www.aalto.com</a></p>
        </div>

        <span class="undo" style="display:none" class="k-button">Click here to open the window.</span>
        <span class="undo" style="display:none" class="k-button">Click here to open the window.</span>
        <script>
                $(document).ready(function() {
                    var window = $("#window"),
                        undo = $(".undo")
                                .bind("click", function() {
                                    window.data("kendoWindow").open();
                                    undo.hide();
                                });

                    var onClose = function() {
                        undo.show();
                    }

                    if (!window.data("kendoWindow")) {
                        window.kendoWindow({
                            width: "600px",
                            title: "About Alvar Aalto",
                            actions: [
                                "Pin",
                                "Minimize",
                                "Maximize",
                                "Close"
                            ],
                            close: onClose
                        });
                    }
                });
        </script>

        <style>
            #example {
                min-height: 500px;
            }

            #undo {
                text-align: center;
                position: absolute;
                white-space: nowrap;
                padding: 1em;
                cursor: pointer;
            }

            .armchair {
                float: left;
                margin: 30px 30px 120px 30px;
                text-align: center;
            }

                .armchair img {
                    display: block;
                    margin-bottom: 10px;
                }
        </style>
    </div>